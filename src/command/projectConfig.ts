import {
    Uri,
    window,
    workspace,
    QuickPick,
    QuickPickItem,
} from "vscode";

import { Job } from "./command";
import { Robot, Script } from "../lib/hamibotApi";
import { RobotInfo } from "../lib/projectConfig";

export async function getProjectNameByInput(): Promise<string | undefined> {
    let projectName = await window.showInputBox({
        title: "ËÆæÁΩÆÈ°πÁõÆÂêçÁß∞",
        prompt: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑÈ°πÁõÆÂêçÁß∞"
    });
    return projectName;
}

export async function setProjectName(): Promise<Job> {
    let projectName = await getProjectNameByInput();
    let { scriptId } = await global.currentConfig.getProjectConfig();

    if (!projectName) {
        return Job.undone;
    }

    // Êõ¥Êñ∞Êú¨Âú∞ÂêçÁß∞
    await global.currentConfig.updateProjectConfig({ name: projectName });

    // Êõ¥Êñ∞ËøúÁ®ãÂêçÁß∞
    await Script.changeScriptName(scriptId!, projectName);

    return Job.done;
}

export async function markScriptFile(uri: Uri): Promise<Job> {
    await global.currentConfig.updateProjectConfig({
        fileMark: {
            scriptFile: workspace.asRelativePath(uri)
        }
    });
    return Job.done;
}

export async function markConfigFile(uri: Uri): Promise<Job> {
    await global.currentConfig.updateProjectConfig({
        fileMark: {
            configFile: workspace.asRelativePath(uri)
        }
    });
    return Job.done;
}

async function createQuickPickRobot(): Promise<QuickPick<RobotQuickPickItem>> {
    const dialog = window.createQuickPick<RobotQuickPickItem>();
    dialog.title = "ÈÄâÊã©Ë∞ÉËØïÊú∫Âô®‰∫∫";
    dialog.matchOnDetail = true;

    const refreshItem = async () => {
        dialog.items = [];
        dialog.busy = true;
        dialog.items = [...(await getQuickPickRobot()), {
            label: "üîÉ Âà∑Êñ∞",
            detail: "ÈáçÊñ∞Ëé∑ÂèñÊú∫Âô®‰∫∫ÂàóË°®",
            alwaysShow: true,
            robotInfo: undefined
        }];
        dialog.busy = false;
    };

    dialog.onDidAccept(() => {
        if (dialog.activeItems[0].robotInfo !== undefined) {
            dialog.hide();
        } else {
            refreshItem();
        }
    });

    dialog.show();
    await refreshItem();
    return dialog;
}

export async function getExecuteRobotByInput(): Promise<RobotInfo | undefined> {
    let dialog = await createQuickPickRobot();
    return new Promise<RobotInfo | undefined>((resolve) => {
        let disposable = dialog.onDidHide(() => {
            let select = dialog.selectedItems;
            dialog.dispose();
            resolve(select ? select[0].robotInfo : select);
        });
    });
}

export async function setExecuteRobot(): Promise<Job> {
    let robot = await getExecuteRobotByInput();

    if (!robot) {
        return Job.undone;
    }

    await global.currentConfig.updateProjectConfig({ executeRobot: robot });
    return Job.done;
}

async function getQuickPickRobot(): Promise<RobotQuickPickItem[]> {
    let robotList: RobotQuickPickItem[] = [];
    let showOffline: boolean = workspace.getConfiguration("hamibot-assistant").get("showOfflineRobot")!;

    for (let item of (await Robot.getRobotList()).items) {
        // ËÆæÁΩÆ‰∏∫‰∏çÊòæÁ§∫Á¶ªÁ∫øÊó∂Ë∑≥ËøáÁ¶ªÁ∫øÁöÑÊú∫Âô®‰∫∫
        if (!showOffline && !item.online) {
            continue;
        }

        let { _id, name, tags } = item;
        robotList.push({
            label: `${item.online ? "üü¢ [Âú®Á∫ø]" : "üî¥ [Á¶ªÁ∫ø]"} ${name}`,
            detail: `${tags.length === 0 ? "" : "[ " + tags + " ]"}${item.brand} ${item.model}`,
            robotInfo: {
                _id: _id,
                name: name,
            }
        });
    }

    return robotList;
}

interface RobotQuickPickItem extends QuickPickItem {
    robotInfo?: RobotInfo
}
